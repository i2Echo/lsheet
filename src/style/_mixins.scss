@charset "utf-8";

// base
// 获取下一个断点名(md -> lg)
@function breakpoint-next($name, $breakpoints:$grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index(breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n+1), null);
}

// 获取断点最小宽度(sm -> 576px)
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($map: $breakpoints, $key: $name);
  @return if($min != 0, $min, null);
}

// 获取断点最大宽度(sm -> 767.98px)
// 此处减0.02因为处于某个区间时是可以大于等于区间左值而小于右值(对于断点而言), 以及用.02而不用.01是修复 Safari 的一个 bug
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - .02px, null);
}

// 获取断点中缀(sm -> -sm)
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

@mixin media-breakpoint-between($down, $up,$breakpoints: $grid-breakpoint) {
  $min: breakpoint-min($down, $breakpoints);
  $max: breakpoint-max($up, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($down, $breakpoints);
    @content;
  } @else if $min == null {
    @include media-breakpoint-down($up, $breakpoints);
    @content;
  }
}

@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  @include media-breakpoint-between($name, $name, $breakpoints)
}

// 构建格子
@mixin make-container() {
  width: 100%;
  padding-left: ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  margin-right: auto;
  margin-left: auto;
}
@mixin make-container-max-width($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint-name, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint-name, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}
@mixin make-row() {
  display: flex;
  flex-wrap: wrap;
  margin-left: ($grid-gutter-width / -2);
  margin-right: ($grid-gutter-width / -2);
}
@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  max-width: percentage($size / $columns);
}

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  %grid-column {
    position: relative;
    width: 100%;
    min-height: 1px;
    padding-left: ($gutter / 2);
    padding-right: ($gutter / 2);
  }

  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @for $i from 1 through $columns {
      .col#{$infix}-#{$i} {
        @extend %grid-column;
      }
    }
    .col#{$infix},
    .col#{$infix}-auto {
      @extend %grid-column;
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      .col#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        min-width: 100%;
      }
      .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none; //重置
      }

      @for $i from 1 through $columns {
        .col#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }
    }
  }
}
